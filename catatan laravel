5 ekstensi untuk programer laravel
https://kawankoding.com/artikel/5-ekstensi-visual-studio-code-untuk-programmer-laravel
1.laravel artisan
2.laravel blade snippets
3.laravel blade spacer
4.laravel doc
5.laravel go to, laravel go to controller
	
#Tahap 1 memulai project.
1.1 menginstal project
composer create-project --prefer-dist laravel/laravel

1.2 generate key (membuat encryption key aplikasi)
php artisan key:generate

1.3 konfigurasi database


DB_CONNECTION=mysql	
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=latihan
DB_USERNAME=root
DB_PASSWORD

1.4 menambahkan dependency (menginstall lybrary vendor)

composer require nama library

composer require yajra/laravel-datatables-oracle

biasanya terdiri dari 2 kata yang dipisahkan oleh garis miring.

>setelah proses install library selesai, langkah selanjutnya mendaftarkan service provider dari paket library pada file config/app.php

pada bagian providers

Laravel\Tinker\TinkerServiceProvider::class,

>tambahkan pada bagian aliases

'Datatables' => Yajra\Datatables\Facades\Datatables::class,

dengan perintah diatas, kita dapat menggunakan class dengan skrip user Datatables; untuk menggunakan class sebagai alias class. tanpa alias, maka menggunakannya dengan skrip

use Yajra\Datatables\facades\Datatables;



2.Menjelajahi Fitur Laravel

2.1 Artisan

artisan merupakan perintah-perintah yang diketikkan dicomand-line 

>untuk dapat melihat perintah-perintah artisan yang dapat digunakan, kita dapat mengetikan perintah berikute


php artisan list

Options:
  -h, --help            Display help for the given command. When no command is given display help for the list command
  -q, --quiet           Do not output any message
  -V, --version         Display this application version
      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output
  -n, --no-interaction  Do not ask any interactive question
      --env[=ENV]       The environment the command should run under
  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug

Available commands:
  clear-compiled       Remove the compiled class file
  down                 Put the application into maintenance mode
  env                  Display the current framework environment
  help                 Display help for a command
  inspire              Display an inspiring quote
  list                 List commands
  migrate              Run the database migrations
  optimize             Cache the framework bootstrap files
  serve                Serve the application on the PHP development server
  test                 Run the application tests
  tinker               Interact with your application
  up                   Bring the application out of maintenance mode
 auth
  auth:clear-resets    Flush expired password reset tokens
 cache
  cache:clear          Flush the application cache
  cache:forget         Remove an item from the cache
  cache:table          Create a migration for the cache database table
 config
  config:cache         Create a cache file for faster configuration loading
  config:clear         Remove the configuration cache file
 db
  db:seed              Seed the database with records
  db:wipe              Drop all tables, views, and types
 event
  event:cache          Discover and cache the application's events and listeners
  event:clear          Clear all cached events and listeners
  event:generate       Generate the missing events and listeners based on registration
  event:list           List the application's events and listeners
 key
  key:generate         Set the application key
 make
  make:cast            Create a new custom Eloquent cast class
  make:channel         Create a new channel class
  make:command         Create a new Artisan command
  make:component       Create a new view component class
  make:controller      Create a new controller class
  make:event           Create a new event class
  make:exception       Create a new custom exception class
  make:factory         Create a new model factory
  make:job             Create a new job class
  make:listener        Create a new event listener class
  make:mail            Create a new email class
  make:middleware      Create a new middleware class
  make:migration       Create a new migration file
  make:model           Create a new Eloquent model class
  make:notification    Create a new notification class
  make:observer        Create a new observer class
  make:policy          Create a new policy class
  make:provider        Create a new service provider class
  make:request         Create a new form request class
  make:resource        Create a new resource
  make:rule            Create a new validation rule
  make:seeder          Create a new seeder class
  make:test            Create a new test class
 migrate
  migrate:fresh        Drop all tables and re-run all migrations
  migrate:install      Create the migration repository
  migrate:refresh      Reset and re-run all migrations
  migrate:reset        Rollback all database migrations
  migrate:rollback     Rollback the last database migration
  migrate:status       Show the status of each migration
 notifications
  notifications:table  Create a migration for the notifications table
 optimize
  optimize:clear       Remove the cached bootstrap files
 package
  package:discover     Rebuild the cached package manifest
 queue
  queue:failed         List all of the failed queue jobs
  queue:failed-table   Create a migration for the failed queue jobs database table
  queue:flush          Flush all of the failed queue jobs
  queue:forget         Delete a failed queue job
  queue:listen         Listen to a given queue
  queue:restart        Restart queue worker daemons after their current job
  queue:retry          Retry a failed queue job
  queue:table          Create a migration for the queue jobs database table
  queue:work           Start processing jobs on the queue as a daemon
 route
  route:cache          Create a route cache file for faster route registration
  route:clear          Remove the route cache file
  route:list           List all registered routes
 schedule
  schedule:run         Run the scheduled commands
 session
  session:table        Create a migration for the session database table
 storage
  storage:link         Create the symbolic links configured for the application
 stub
  stub:publish         Publish all stubs that are available for customization
 vendor
  vendor:publish       Publish any publishable assets from vendor packages
 view
  view:cache           Compile all of the application's Blade templates
  view:clear           Clear all compiled view files

2.2 Migration

version control untuk skema database pada sebuah aplikasi

2.2.1 Membuat tabel


untuk membuat tabel yang diinginkan tuliskan perintah berikut:
php artisan make:migration create_produk

edit file terkait:

   public function up()
    {
        Schema::create('produk', function (Blueprint $table) {
            $table->id();
            $table->string('nama_produk');
            $table->integer('harga_beli');
            $table->integer('harga_jual');
            $table->timestamps();
        });
    }

untuk membuat tabel diatas ketikan perintah berikut:
php artisan migrate

2.2.2 Rolling back migration

untuk menghapus semua table

php artisan db:wipe

untuk merollback migration terakhir gunakan perintah berikut:

php artisan migrate:rollback

untuk merollback operasi lebih dari satu, misalnya 5 operasi terakhir, kita dapat menambahkan opsi --step=5

php artisan migrate:rollback --step=5


merollback seluruh operasi migration gunakan perintah berikut

php artisan migrate:reset

merollback seluruh operasi migration dan langsung menjalankan kembali migration, berikut perintahnya

php artisan migrate:refresh

lebih lengkapnya lihat 
php artisan list


2.2.3 Modifikasi table
membuat tabel dengan perintah Schema::create(), mengubah nama tabel menggunakan  perintah Schema::rename()

contoh sebagai berikut:
public function up()
    {
        Schema::rename('produk','barang');
    }


2.2.4 Modifikasi kolom
untuk dapat memodifikasi kolom kita harus tambahkan dependency doctrine/dbal dengan perintah berikut:

composer require doctrine/dbal untuk penambahan dependency ini tidak perlu mendaftarkan provider


pada saat menambahkan kolom, juga dapat memberikan pengaturan pada kolom tersebut di belakang nama kolom, misalnya sebagai berikut:

$table->string('nama')->first();// membuat kolom dan memposisikan kolom pada urutan pertama

$table->string('nama1)->after('nama');//membuat kolom dan memposisikan kolom nama1 sesudah kolom nama

$table->string('nama2')->comment('komentar');//memberikan komentar pada kolom nama2

$table->string('nama3')->default('riski abidin');//memberikan nilai default riski abidin pada kolom nama3

$table->string('nama4')->nullable();//mengijinkan nilai NULL dimasukan pada kolom nama4


2.3 Model

perintah untuk membuat model

php artisan make:model Produk


buka file Produk.php dan rubah seperti berikut:

class Produk extends Model
{
    protected $table='produk';
}


2.4 Seeder
digunakan untuk membuat contoh data pada database.

2.4.1 cara membuat seeder

perintah berikut:

php artisan make:seeder ProdukTableSeeder


tambahkan syntak berikut ke file ProdukTableSeeder.php:

public function run()
    {
        \App\Produk::insert([
            ['nama_barang'=>'sabun mandi', 'harga_jual'=>'2000'],
            ['nama_barang'=>'sabun mandi2', 'harga_jual'=>'2000'],
            ['nama_barang'=>'sabun mandi3', 'harga_jual'=>'2000'],
            
        ]);
    }

langkah selanjutnya buka file DatabaseSeeder.php dan panggil seeder yang baru dibuat dan tambahkan syntak berikut:

public function run()
    {
        // $this->call(UserSeeder::class);
        $this->call(ProdukTableSeeder::class);
    }

lalu jalankan perintah artisan berikut:

php artisan db:seed

2.4.2 Menggunakan model factory

berfungsi untuk membuat sampel data hingga ratusan atau bahkan ribuan

-----lompati dulu.

2.5 Routing
2.5.1 Cara membuat route
untuk membuat route terletak di  routes/web

format penulisan:
Route::get($uri, $callback);

2.5.2 berbagai route method

1. untuk menampilkan/mengambil data

Route::get('coba', function(){//});

2. untuk mengirim data dari form dengan method POST, biasanya untuk menambah data

Route::post('coba', function(){//});

3. Untuk mengirim data dari form dengan method PUT, biasanya untuk mengubah (update) data

Route::put('coba', function(){//});

4. untuk mengirim data dari form dengan method DELETE, biasanya untuk menghapus data

Route::delete('coba', function(){//}});

untuku route yang dapat merespos beberapa HTTP request, kita dapat menggunakan method match(), sedangkan route yang dapat merespon semua HTTP request, dapat menggunakan method any().

contoh:

Route::match(|'get','post'|,'coba', function(){});
Route::any('coba', function(){});

2.5.3 Berbagai cara penulisan route

1. Route dengan parameter
Parameter pada route ditandai dengan tanda {}. Artinya kata URL yang berada pada posisi ini akan menjadi nilai parameter contoh parameter id
localhost/latihan/produk/5

contoh:

Route::get('produk/{id}', function($id){
	echo $id;
});

Route::get('produk/{id?)', function($id=1){
	echo $id;
});


2. Route dengan regular expression
Route ini akan dijalankan hanya jika nilai dari parameter pada URL memenuhi pola tertentu. Misalnya pada baris pertama contoh dibawah, parameter nama harus berupa karakter antara A dan Z

contoh:

Route::get('produk/{nama}', function($nama){
	echo $nama;
})->where('nama','[A-Za-z]+');


Route::get('produk/{id}/{nama}', function($id, $nama){
	echo $id "-"$nama;
})->where(array('id'=>'[0-9]+', 'nama'=>'[A-Za-z]+'));

3. Route dengan nama

kita dapat menggunakan atau memanggil route dengan perintah route('produk.tambah').

contoh:
Route::get('produk/tambah', function(){

	echo "produk berhasil ditambah";
})->name('produk.tambah');

4. Route dengan aksi controller
route seperti ini ketika dijalankan akan mengakses controller yang disebutkan pada parameter kedua. jika ingin mengakses method tertentu pada controller, maka antara nama controller dan nama method dipisahkan dengan tanda @, pada contoh dibawah ini kita menjalankan method tambah() pada class ProdukController.

Route::get('produk/tambah', 'PodukController@tambah');

2.6 Query Buider dan Eloquent ORM

QB menyediakan cara untuk menjalankan query database dengan lebih mudah. Bahkan dengan QB kita tidak perlu repot-repot memikirkan cara menangkal SQL injection, karena query builder sudah dilengkapi dengan fitur keamanan, Selain itu dengan QB untuk berinteraksi dengan database tanpa membuat model terlebih dahulu.

contoh skrip QB (tanpa eloquent)

DB::table('nama_table')->get(); //

ORM (object relational mapping) yang sangat powerful. ORM merupakan teknik untuk memetakan basis data relational ke model objek. Berinteraksi dengan database seperti menampilkan, menambah, meng-update, maupun menghapus data menggunakan eloquent model lebih disarankan walaupun kita dapat melakukannya hanya dengan query builder tanpa membuat model terlebih dahulu.

Perlu diperhatikan eloquent akan menganggap nama class sebagai nama tabel dengan menambahkan 's' dibelakangnya. Eloquent juga akan berasumsi kolom primary key memiliki nama 'id'. Untuk itu kita perlu mereplace property $table dan $primarykey pada model jika kita memiliki format sendiri pada tama tabel. selain itu, kita juga perlu membuat property $fillable untuk menentukan nama kolom yang dapat diisi, sehingga skirp file model Produk.php dapat diubah menjadi seperti berikut:

<?php
namespace App;

use Illuminate\Database\Eloquent\Model;

class Produk extends Model{

	protected $table = 'produk';
	protected $primaryKey = 'id_produk';
	protected $fillabel = ['nama_barang', 'harga_jual'];

}

?>

Untuk mengakses model tersebut, cukup dengan menggunakan kata App\Produk. Kita akan mempelajari berbagai contoh manipulasi data dengan eloquent dan perbedaanya jika tanpa eloquent. Karena kita belum membahas tentang controller, sementara kita buat skrip di dalam route.


2.6.1 Menampilkan Data

Untuk menampilkan semua data, gunakan method all(). silahkan buka file web.php, lalu tambahkan skrip route sebagai berikut:

Route::get('produk/semua', function(){
    $produk = App\Produk::all();
    foreach($produk as $data){
        echo $data->id_produk. ". ".
            "nama barang: ".$data->nama_barang." | ".
            "harga jual: ".$data->harga_jual. "<br>";
    }
});



Jika tanpa eloquent model, maka skripnya menjadi sebagai berikut, menggunakan QB).

Route::get('produk/semua2', function(){
    $produk = DB::table('produk')->get();
    foreach($produk as $data){
        echo $data->id_produk. ". ".
            "nama barang: ".$data->nama_barang." | ".
            "harga jual: ".$data->harga_jual. "<br>";
    }


});

Selain dengan cara diatas, ada berbagai variasi dalam menampilkan data. menggunakan query builder. Berikut ini berbagai variasi skrip untuk menampilkan data.

jika menggunakan eloquent tambahkan query builder berikut:

App/Produk::. 

sedangkan jika tanpa menggunakan eloquent, maka query builder dapat ditulis setelah kata:

DB::table('produk')->

berikut keterangan QB:
------------------------------------------------

count() = menampilkan jumlah data

max('harga_jual') = menampilkan nilai maksimal dari field harga_jual 

min('harga_jual') = menampilkan nilai minimal dari field harga_jual

sum('harga_jual') = menampilkan nilai total dari penjumlah field harga_jual

select('nama_barang as nama', 'harga_jual as harga') = memilih beberapa kolom dan membuat alias untuk kolom

select(DB::raw('count(*) as total, sum(harga_jual) as harga'))->get() = menampilkan baris string expression

where('harga_jual','=', 2000)->get() = menampilkan data dengan kondisi tertentu(where1).

where([
	['harga_jual', '<=', 2000 ],
	['id', '>=', 3]
])->get() = menampilkan data dengan beberapa kondisi


where('id', '<=', 3)orWhere('nama_barang', '=', 'sabun mandi')->get() = menggunakan OR untuk menampilkan beberapa kondisi

whereBetween('id', [3,5])->get() = menampilkan data diantara 2 batas nilai

whereNotBetween('id',  [1, 3])->get() = menampilkan data tidak diantar 2 batas nilai

whereIn('id', [1, 3, 5)->get() = menampilkan data sesuai yang disebutkan

whereNotIn('id', [1, 2]->get() = menampilkan data selain yang disebutkan

whereNull('harga_jual')->get() = menampilkan data dengan nilai suatu kolom NULL

whereNotNull('harga_jual')->get() = menampilkan data dengan nilai suatu kolom tidak NULL

whereDate('created_at','2017-06-01')->get() = menampilkan data dengan nilai tanggal

whereDay('created_at', '01')->get() = menampilkan data dengan nilai tanggal saja

whereMonth('created_at', '06')->get() = menampilkan data dengan nilai bulan

whereYear('created_at', '2017')->get() = menampilkan data dengan nilai tahun

whereTime()->get() = menampilkan data dengan nilai waktu

whereColumn('created_at', '<', 'update_at')->get() = menampilkan data dengan membandingkan dua kolom

orderBy('id', 'asc')->get() = menampilkan data dengan urutan tertentu

inRandomOrder()->get() = menampilkan data dengan urutan acak

latest()->get() = menampilkan data dari yang terbaru

oldest()->get() = menampilkan data dari yang terlama

groupBy()->get() = menampilkan data menggunakan groupBy

limit(3)->offset(2)->get() = menampilkan data dengan batasan tertentu menggunakan offset atau bisa menggunakan alternatif lain menggunakan take(3)->skip(2)->get()

join('kategori', 'kategori.id', '=', 'produk.kategori_id')->get() = menampilkan data dari beberapa tabel
